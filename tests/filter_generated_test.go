// Code generated by go generate; DO NOT EDIT.
/*
Copyright 2019 HAProxy Technologies

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package tests

import (
	"fmt"
	"strings"
	"testing"

	"github.com/haproxytech/config-parser/v4/parsers/filters"
)

func TestFiltersfilters(t *testing.T) {
	tests := map[string]bool{
		"filter fcgi-app my-application":                                  true,
		"filter compression":                                              true,
		"filter spoe config file":                                         true,
		"filter spoe engine name config file":                             true,
		"filter trace name name random-parsing random-forwarding hexdump": true,
		"filter trace random-parsing random-forwarding hexdump":           true,
		"filter trace random-forwarding hexdump":                          true,
		"filter trace hexdump":                                            true,
		"filter fcgi-app":                                                 false,
		"filter fcgi-app first second":                                    false,
		"filter compression false":                                        false,
		"filter spoe":                                                     false,
		"filter spoe config":                                              false,
		"filter spoe engine":                                              false,
		"filter spoe engine config":                                       false,
		"filter trace name":                                               false,
		"filter trace 0 name":                                             false,
		"filter trace":                                                    false,
		"filter spoe l : d 8 t 8 t t c t t t 8 t 8 t t t 8 t t t 8 t 8 t t 8 t t t 8 8 t config": false,
		"filter cache": false,
		"---":          false,
		"--- ---":      false,
	}
	parser := &filters.Filters{}
	for command, shouldPass := range tests {
		t.Run(command, func(t *testing.T) {
			line := strings.TrimSpace(command)
			lines := strings.SplitN(line, "\n", -1)
			var err error
			parser.Init()
			if len(lines) > 1 {
				for _, line = range lines {
					line = strings.TrimSpace(line)
					if err = ProcessLine(line, parser); err != nil {
						break
					}
				}
			} else {
				err = ProcessLine(line, parser)
			}
			if shouldPass {
				if err != nil {
					t.Errorf(err.Error())
					return
				}
				result, err := parser.Result()
				if err != nil {
					t.Errorf(err.Error())
					return
				}
				var returnLine string
				if result[0].Comment == "" {
					returnLine = result[0].Data
				} else {
					returnLine = fmt.Sprintf("%s # %s", result[0].Data, result[0].Comment)
				}
				if command != returnLine {
					t.Errorf(fmt.Sprintf("error: has [%s] expects [%s]", returnLine, command))
				}
			} else {
				if err == nil {
					t.Errorf(fmt.Sprintf("error: did not throw error for line [%s]", line))
				}
				_, parseErr := parser.Result()
				if parseErr == nil {
					t.Errorf(fmt.Sprintf("error: did not throw error on result for line [%s]", line))
				}
			}
		})
	}
}
